openapi: 3.0.0

info:
  title: Consulting Project 
  version: 0.0.1
  description: ''


servers:
  - url: '{protocol}://{domain}/{version}'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      domain:
        enum:
          - 127.0.0.1:3000
          - api.staging.co.kr
          - api.production.co.kr
        default: 127.0.0.1:3000
      version:
        enum: 
          - v1
          - v2
        default: v1

tags:
- name: 'user'
  description: '유저 관련 API'
- name: 'admin'
  description: '어드민 관련 API'
- name: 'partners'
  description: '상담사 관련 API'
- name: 'keyword'
  description: '키워드 관련 API'
- name: 'point'
  description: '포인트 관련 API'
- name: 'schedules'
  description: '스케쥴링 관련 API'
# - name: 'search'
#   description: '검색 관련 API'



security: 
- ApiKeyAuth: []
# - userApiKeyAuth: []
# - bearerAuth: []

paths:
  /user/detail:
    get:
      tags: 
      - user
      summary: '특정 유저 상세정보'
      description: '1. 유저 마이페이지에서 사용 하고 본인만 보는 것으로 userId는 JWT안에 있는 값으로 만 판별해서 내려줌'
      # parameters: 
      # - $ref: '#/components/parameters/userIdParam'
      security: 
      - ApiKeyAuth: []
      - AccessTokenAuth: []
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/200'
                - type: object
                  properties:
                    result:
                      $ref: '#/components/schemas/user'
                
  /user/signup:
    post:
      tags: 
      - user
      summary: '유저 회원가입'
      requestBody:
        content:
          application/json; charset:utf-8:
            schema:
              $ref: '#/components/schemas/user'
      security: 
      - ApiKeyAuth: []
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
                
                  
  
  /user/singin:
    post:
      tags: 
      - user
      summary: '유저 로그인'
      description: ' 1. JWT Refresh 관련 정보 확인 필요<br>2. 리턴 값을 어떻게 줄껀지<br>3. SNS 로그인 어떻게 할꺼니 ?'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userLogin'
      security: 
      - ApiKeyAuth: []
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/200'
                - type: object
                  properties:
                    result:
                      type: obejct
                      $ref: '#/components/schemas/LoginResponse'
  
  /user/signout:
    post:
      tags: 
      - user
      summary: '유저 로그아웃'
      security: 
      - ApiKeyAuth: []
      - AccessTokenAuth: []
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
  
  /user/email/check:
    get:
     tags: 
     - user
     summary: '유저 이메일 중복 확인'
     security: 
     - ApiKeyAuth: []
     parameters: 
     - $ref: '#/components/parameters/emailParam'
     responses:
      200:
        description: 'success'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/200'
              
  /admin/partners:
    get:
      tags:
      - admin
      summary: '어드민에서 상담사 조회'
      description: 퍼블릭에서도 사용가능하고 프라이빗에서도 사용가능한 하나의 API를 만들까 ? 아니면 따로따로 구현할까?
      parameters: 
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeparam'
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/200'
                - type: object
                  properties:
                    result:
                      type: object
                      properties:
                        partners:
                          type: array
                          items:
                            $ref: '#/components/schemas/partnerDetail'
                        totalCount:
                          type: integer
                          
  /admin/partners/{partnersId}:
    put:
      tags: 
      - admin
      summary: '어드민에서 파트너 정보 업데이트 시켜 줄때 사용 '
      parameters: 
      - $ref: '#/components/parameters/partnersIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/partnerDetail'
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'

  /partners/signup:
    post:
      tags:
      - partners
      summary: '상담사 회원가입'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/partners'
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
  /partners:
    get:
      tags:
      - partners
      summary: '상담사 조회'
      parameters: 
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeparam'
      - $ref: '#/components/parameters/keywordParam'
      - $ref: '#/components/parameters/levelParam'
      - $ref: '#/components/parameters/genderParam'
      - $ref: '#/components/parameters/certificateParam'
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/200'
                - type: object
                  properties:
                    result:
                      type: object
                      properties:
                        partners:
                          type: array
                          items:
                            $ref: '#/components/schemas/partnerDetail'
                        totalCount:
                          type: integer
                
  /keywords:
    get:
      tags: 
      - keyword
      summary: '키워드 정보'
      security: 
      - ApiKeyAuth: []
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/200'
                - type: object
                  properties:
                    result:
                      $ref: '#/components/schemas/keywords'
  
  /point/charge:
    post:
      tags: 
      - point
      summary: 카카오 결제 후 포인트 입력
      description: 카카오 결제 후 포인트 DB로 입력하는 API
      security: 
      - ApiKeyAuth: []
      - AccessTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pointCharge'
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
  
  /point/send:
    post:
      tags:
      - point
      summary: 유저가 상담권 구매 시 사용 
      description: 유저가 상담권 구매 시
      security: 
      - ApiKeyAuth: []
      - AccessTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pointSend'
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
                
  /schedules/partners/{partnersId}:
    get:
      tags: 
      - schedules
      summary: '상담사 스케쥴 일정 정보 가져오는 API'
      description: 'patnersId? email?<br> startedAt 30분 단위로 하냐 / Range로 하냐 ?<br> 금일 00시 이후 스케쥴만 보여줘 ? 어떻게해 ? 정해줘 제발'
      parameters: 
      - $ref: '#/components/parameters/partnersIdParam'
      - $ref: '#/components/parameters/dateParam'
      security: 
      - ApiKeyAuth: []
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/200'
                - type: object
                  properties:
                    result:
                      $ref: '#/components/schemas/schedules'

  /schedules/partners:
    post:
      tags: 
      - schedules
      summary: '스케쥴 일정 생성 API'
      security: 
      - ApiKeyAuth: []
      - AccessTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/schedulesObject'
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
  
  /schedules/user:
    post:
      tags: 
      - schedules
      summary: '유저 스케쥴 확정 API'
      description: '수정 절대 불가 절대 못 바꿔 진짜다 안된다 경고창 띄워주세요 '
      security: 
      - ApiKeyAuth: []
      - AccessTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/schedulesObject'
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'

components:
  schemas:
    user:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: True
        name:
          type: string
        age:
          type: integer
        gender:
          type: integer
    
    userLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        passowrd:
          type: string

    partners:
      type: object
      properties:
        partnerId:
          type: integer
          example: 1
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: True
        name:
          type: string
        gender:
          type: integer
          example: '1 (남자: 1, 여자: 2)'
          
    partnerDetail:
      type: object
      properties:
        url:
          description: 유튜브 url
          type: string
          example: www.youtube.com
        shortInfo:
          description: 한줄 소개
          type: string
          example: 간략 소개 입니다.
        career:
          description: 경력
          type: string
          example: 내가 말이야 어디서 뭐했고 어디서 뭐했어
        info:
          description: 긴 소개글
          type: string
          example: 이건 긴 소개글 입니다.
        chatCost:
          description: 채팅 상담 비용
          type: integer
          example: 30000
        keyword:
          description: 상담사 키워드
          type: string
          example: 우울
        level:
          description: 상담사 레벨
          type: integer
          example: 1
        latitude:
          description: 위도
          type: integer
        longitude:
          description: 경도
          type: integer
        image:
          description: S3 이미지 path
          type: string

    schedulesObject:
      type: object
      properties:
        partnersId:
          type: integer
          example: 1000004
        scheduleId:
          type: integer
          example: 1
    
    schedules:
      type: object
      properties:
        schedules:
          type: array
          items:
            type: object
            properties:
              scheduleId: 
                type: integer
                example: 1
              reservation:
                type: boolean
              startedAt:
                type: string
                example: '2020-07-02 12:00:00'
              endedAt:
                type: string
                example: '2020-07-02 12:30:00'
    
    pointCharge:
      type: object
      properties:
        userId:
          type: integer
        point:
          type: integer
          
    pointSend:
      type: object
      properties:
        userId:
          type: integer
        partnerId:
          type: integer
        point:
          type: integer

    keywords:
      type: object
      properties:
        keywords:
          type: array
          items:
            type: string
          example: ['우울', '행복']
    
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
      

    200:
      type: object
      properties:
        message:
          type: string
        result:
          type: object
          
  parameters:
    dateParam:
      in: query
      name: date
      description: 날짜
      schema:
        type: string
        format: date
        
    partnersIdParam:
      in: path
      name: partnersId
      description: 상담사 ID (=userId)
      required: true 
      schema:
        type: integer
        
    userIdParam:
      in: path
      name: userId
      description: 유저 ID
      required: true 
      schema:
        type: integer
      
    emailParam:
      in: query
      name: email
      description: 이메일
      schema:
        type: string
        format: email
        
    pageParam:
      in: query
      name: page
      description: 페이지
      schema:
        type: integer
        example: 1
      # required: True
      
    sizeparam:
      in: query
      name: size
      description: 페이지 당 사이즈
      schema:
        type: integer
        example: 15
      # required: True
      
    keywordParam:
      in: query
      name: keyword
      description: 키워드
      schema:
        type: string
        example: 강박
    
    levelParam:
      in: query
      name: level
      description: 상담사 레벨 
      schema:
        type: integer
        example: 1
    
    genderParam:
      in: query
      name: gender
      description: 상담사 성별
      schema:
        type: integer
        example: 1
      
    certificateParam:
      in: query
      name: certificate
      description: 상담사 자격증
      schema:
        type: integer
        example: 1
        
    scheduleIdParam:
      in: query
      name: scheduleId
      required: true
      schema:
        type: array
        items:
          type: string
          format: multi
      
    
      
  securitySchemes:
    ApiKeyAuth:
      in: header
      type: apiKey
      name: 'x-api-key'
      
    userApiKeyAuth:
      in: header
      type: apiKey
      name: 'x-api-userId'
      
    AccessTokenAuth:
      in: header
      type: apiKey
      name: 'x-api-accessToken'
    
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT